class LinkManager
!!!162818.php!!!	get(in attribute : string, in index : mixed = null) : mixed

			if ($index!==null)
			{
				if (in_array($attribute, $this::ATTRIBUTES))
				{
					$requete=$this->getBdd()->prepare('SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.' WHERE '.$attribute.'=?');
					$requete->execute(array($index));
					return $requete->fetchAll();
				}
			}
			return False;
!!!162946.php!!!	getByGroup(in attributes : array, in operations : array, in group : string, in strict : bool = False) : mixed

			if (in_array($group, $this::ATTRIBUTES))
			{
				$attributes_operators=array();
				$true_attributes=array();
				if ($strict)
				{
					$attributes_count=array();
				}
				foreach ($attributes as $index => $condition)
				{
					$conditionCreator=$this->conditionCreator($condition, $operations[$index]);
					$attributes_operators[$index]=$conditionCreator[0];
					$condition=$conditionCreator[1];
					$true_attributes=array_merge($true_attributes, array_values($condition));
				}
				if ($strict)
				{
					$keys=array_keys_multi($attributes);
					foreach ($keys as $key)
					{
						$attributes_count[]='COUNT('.$key.')='.(string)count(array_column($attributes, $key));
					}
					$condition_count=' AND '.$group.' IN (SELECT '.$group.' FROM '.$this::TABLE.' GROUP BY '.$group.' HAVING '.implode(' AND ', $attributes_count).')';
				}
				else
				{
					$condition_count='';
				}
				$selects_with_table_name=array();
				$equalitiess_join_with_table_name=array();
				$nbr_conditions=count($attributes);
				for ($index=0; $index < $nbr_conditions; $index++)
				{
					$selects_with_table_name[]='(SELECT '.$group.' FROM '.$this::TABLE.' WHERE '.implode(' AND ', $attributes_operators[$index]).$condition_count.') AS table_'.$index;
					if ($index+1<$nbr_conditions)
					{
						$equalitiess_join_with_table_name[]='table_'.$index.'.'.$group.'=table_'.(string)($index+1).'.'.$group;
					}
				}
				$group_with_table_name='table_0.'.$group;
				if (count($equalitiess_join_with_table_name)==0)
				{
					$where_equalities_join='';
				}
				else
				{
					$where_equalities_join=' WHERE '.implode(' AND ', $equalitiess_join_with_table_name);
				}
				$select='SELECT '.$group_with_table_name.' FROM '.implode(' JOIN ', $selects_with_table_name).$where_equalities_join.' GROUP BY '.$group_with_table_name;
				$requete=$this->getBdd()->prepare($select);
				$requete->execute(array_values_recursive($true_attributes));
				return $requete->fetchAll();
			}
			return False;
!!!163074.php!!!	addBy(in variants : array, in invariants : array) : void

			foreach ($variants as $variant)
			{
				$variant=array_intersect_key($variant, array_flip($this::ATTRIBUTES));
			}
			$invariants=array_intersect_key($invariants, array_flip($this::ATTRIBUTES));
			$attributes=array_merge(array_keys($variants[\array_key_first($variants)]),array_keys($invariants));
			$data=array();
			for ($i=0; $i < count($variants); $i++)
			{ 
				$datum=array();
				foreach ($variants[$i] as $attribute => $value)
				{
					$datum[$attribute]=$value;
				}
				foreach ($invariants as $attribute => $value)
				{
					$datum[$attribute]=$value;
				}
				$data[]=$datum;
			}
			foreach ($data as $datum)
			{
				$requete=$this->getBdd()->prepare('INSERT INTO '.$this::TABLE.'('.implode(',', $attributes).') VALUES ('.implode(',', array_fill(0, count($attributes), '?')).')');
				$requete->execute(array_values($datum));
			}
!!!163202.php!!!	exist(in attribute : string, in index : mixed) : bool

			return (bool)$this->get($attribute, $index);
!!!163330.php!!!	existByGroup(in attributes : array, in operations : array, in group : string, in strict : bool = False) : bool

			return (bool)$this->getByGroup($attributes, $operations, $group, $strict);
!!!163458.php!!!	retrieveBy(in attributes : array = null, in operations : array = null, in name_class : string = null, in name_id : array = null, in recovey :  = 1) : array

			if ($name_class===null)
			{
				preg_match('/[A-Z]+[a-z]+$/', get_class($this), $matches);
				$name_class=$matches[0];
				preg_match('/^((\w+\\\)+)/', get_class($this), $matches);
				$name_class='\\'.$matches[0].$name_class;
			}
			if ($name_id===null)
			{
				$name_id=array(
					'db' => 'id_'.strtolower(get_class_name($name_class)),
					'obj' => 'id',
				);
			}
			$results=$this->getBy($attributes, $operations);
			switch ($recovey)
			{
				case 0:
					$Objects=array();
					foreach ($results as $result)
					{
						$Objects[]=new $name_class(array($name_id['obj'] => $result[$name_id['db']]));
					}
					return $Objects;
					break;
				case 1:
					$name_manager=$name_class.'Manager';
					$Manager=new $name_manager(\core\DBFactory::MysqlConnection());
					return $Manager->retrieveBy(array(
						$name_id['obj'] => array_column($results, $name_id['db']),
					), array(
						$name_id['obj'] => 'IN',
					));
					break;
				case 2:
					$Objects=array();
					foreach ($results as $result)
					{
						$Object=new $name_class(array($name_id['obj'] => $name_id['db']));
						$Object->retrieve();
						$Objects[]=$Object;
					}
					return $Objects;
					break;
				defaut:			// Ne devrait jamais arriver
					$Objects=array();
					foreach ($results as $result)
					{
						$Objects[]=new $name_class(array($name_id['obj'] => $result[$name_id['db']]));
					}
					return $Objects;
					break;
			}
