class Manager
!!!313474.php!!!	getBdd() : \PDO

				return $this->bdd;
!!!313602.php!!!	setBdd(in bdd : \PDO) : void

				$this->bdd=$bdd;
!!!313730.php!!!	testAttributes(in array : array) : array

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['test_attributes'], 'manager');
			return array_intersect_key($array, array_flip($this::ATTRIBUTES));
!!!313858.php!!!	conditionCreator(in values : array, in operations : mixed) : array

			$values=$this->testAttributes($values);
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['condition_creator_start'], 'manager');
			$attributesWithOperators=array();
			if (!empty($values) && $values!==null)
			{
				if (is_array($operations))	// Array containing the name and operation to be performed on each attribute
				{
					new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['operations_array'], 'manager');
					foreach ($values as $attribute => $value)
					{
						if (isset($operations[$attribute]))
						{
							switch (trim($operations[$attribute]))	// Operators whitelist
							{
								case 'IN':
									if (!isset($attributes))
									{
										$attributes=array_keys($values);
									}
									$attributesWithOperators[]=$attribute.' IN ('.str_repeat('?, ', count($value)-1).'?)';
									$array_search_result=array_search($attribute, $attributes);
									if (count($values)>1)
									{
										if ($array_search_result<=0)
										{
											$values=array_merge($value,array_slice($values, 1));
										}
										else if ($array_search_result>=count($values)-1)
										{
											$values=array_merge(array_slice($values, 0, count($values)-1), $value);
										}
										else
										{
											$values=array_merge(array_slice($values, 0, $array_search_result, true),$value,array_slice($values, $array_search_result+1, null, true));
										}
									}
									else
									{
										$values=$value;
									}
									break;
								case '=':
								case '!=':
								case '<>':
								case '>':
								case '<':
								case '>=':
								case '<=':
									$attributesWithOperators[]=$attribute.$operations[$attribute].'?';
									break;
								default:
									new \exception\Error($GLOBALS['lang']['class']['core']['manager']['unknown_operator'], 'manager');
									break;
							}
						}
						else
						{
							$attributesWithOperators[]=$attribute.'=?';
						}
					}
				}
				else if (is_string($operations))	// operation to be performed on each attribute
				{
					new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['operations_string'], 'manager');
					switch (strtolower(trim($operations)))
					{
						case 'IN':
							foreach ($values as $attribute => $value)
							{
								if (!isset($attributes))
								{
									$attributes=array_keys($values);
								}
								$attributesWithOperators[]=$attribute.' IN ('.str_repeat('?, ', count($value)-1).'?)';
								$array_search_result=array_search($attribute, $attributes);
								if (count($values)>1)
								{
									if ($array_search_result<=0)
									{
										$values=array_merge($value,array_slice($values, 1));
									}
									else if ($array_search_result>=count($values)-1)
									{
										$values=array_merge(array_slice($values, 0, count($values)-1), $value);
									}
									else
									{
										$values=array_merge(array_slice($values, 0, $array_search_result, true),$value,array_slice($values, $array_search_result+1, null, true));
									}
								}
								else
								{
									$values=$value;
								}
							}
							break;
						case '=':
						case '!=':
						case '<>':
						case '>':
						case '<':
						case '>=':
						case '<=':
							foreach ($values as $attribute => $value)
							{
								$attributesWithOperators[]=$attribute.$operations.'?';
							}
							break;
						default:
							new \exception\Error($GLOBALS['lang']['class']['core']['manager']['unknown_operator'], 'manager');
							break;
					}
				}
				else
				{
					new \exception\Warning($GLOBALS['lang']['class']['core']['manager']['unknown_operations_type'], 'manager');
					foreach ($values as $attribute => $value)
					{
						$attributesWithOperators[]=$attribute.'=?';
					}
				}
			}
			return [$attributesWithOperators, $values];
!!!313986.php!!!	boundaryInterpreter(in bounds : array) : string

			$order_by=$this::INDEX;
			$order='ASC';
			$offset=0;
			$limit=1;
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['boundary_interpreter_start'], 'manager');
			foreach ($bounds as $name => $value)
			{
				switch (strtolower(trim($name)))
				{
					case 'order by':
					case 'order':
					case 'order_by':
						new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['order_by'], 'manager');
						if (!in_array($value, $this::ATTRIBUTES))
						{
							new \exception\Error($GLOBALS['lang']['class']['core']['manager']['unknown_attribute'], 'manager');
						}
						else
						{
							$order_by=$value;
						}
						break;
					case 'end':
						new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['end'], 'manager');
						if (!is_numeric($value))
						{
							new \exception\Error($GLOBALS['lang']['error_not_numeric'], 'manager');
						}
						else
						{
							$offset=$value;
							$order='DESC';
						}
						break;
					case 'direction':
						new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['direction'], 'manager');
						if ($order==='ASC')	// end have priority
						{
							switch (strtolower(trim($value)))
							{
								case 'ASC':
								case 'DESC':
									$order=$value;
									break;
								default:
									new \exception\Error($GLOBALS['lang']['class']['core']['manager']['unknown_direction'], 'manager');
							}
						}
						else
						{
							new \exception\Warning($GLOBALS['lang']['class']['core']['manager']['already_end'], 'manager');
						}
						break;
					case 'offset':
					case 'position':
					case 'start':
						new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['offset'], 'manager');
						if (!is_numeric($value))
						{
							new \exception\Error($GLOBALS['lang']['error_not_numeric'], 'manager');
						}
						else
						{
							$offest=$value;
						}
						break;
					case 'limit':
					case 'number':
						new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['limit'], 'manager');
						if (!is_numeric($value))
						{
							new \exception\Error($GLOBALS['lang']['error_not_numeric'], 'manager');
						}
						else
						{
							$limit=$value;
						}
						break;
					default:
						new \exception\Error($GLOBALS['lang']['class']['core']['manager']['unknown_clause'].' '.$name, 'manager');
				}
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['boundary_interpreter_end'].' ['.'ORDER BY '.$order_by.' '.$order.' LIMIT '.(string)$limit.' OFFSET '.(string)$offset.']', 'manager');
			return 'ORDER BY '.$order_by.' '.$order.' LIMIT '.(string)$limit.' OFFSET '.(string)$offset;
!!!314114.php!!!	get(in index : mixed) : array

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['get'].' '.'SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'='.$index, 'manager');
			$requete=$this->getBdd()->prepare('SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
			return $requete->fetch(\PDO::FETCH_ASSOC);
!!!314242.php!!!	add(in values : array) : int

			$values=$this->testAttributes($values);
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['add'].' '.'INSERT INTO '.$this::TABLE.'('.implode(',', array_keys($values)).') VALUES ('.implode(',', $values).')', 'manager');
			$requete=$this->getBdd()->prepare('INSERT INTO '.$this::TABLE.'('.implode(',', array_keys($values)).') VALUES ('.implode(',', array_fill(0, count($values), '?')).')');
			$requete->execute(array_values($values));
			return $this->getBdd()->lastInsertId();
!!!314370.php!!!	update(in values : array, in index : mixed) : void

			$attributesWithOperators=array();
			$values=$this->testAttributes($values);
			foreach ($values as $attribute => $value)
			{
				$attributesWithOperators[]=$attribute.'=?';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['update'].' '.'UPDATE '.$this::TABLE.' SET '.implode(',', $attributesWithOperators).' WHERE '.$this::INDEX.'='.$index, 'manager');
			$requete=$this->getBdd()->prepare('UPDATE '.$this::TABLE.' SET '.implode(',', $attributesWithOperators).' WHERE '.$this::INDEX.'=?');
			$values[]=$index;
			$requete->execute(array_values($values));
!!!314498.php!!!	updateBy(in values_get : array, in operations : array, in values_update : array) : void

			$valuesUpdateOperators=array();
			$values_update=$this->testAttributes($values_update);
			foreach ($values_update as $attribute => $value)
			{
				$valuesUpdateOperators[]=$attribute.'=?';
			}
			if (!empty($values_get) && $values_get!==null)
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values_get, $operations);
				$valuesGetOperators=$conditionCreator[0];
				$values_get=$conditionCreator[1];
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $valuesGetOperators), 'manager');
				$where=' WHERE '.implode(' AND ', $valuesGetOperators);
			}
			else
			{
				$where='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['updateby'].' '.'UPDATE '.$this::TABLE.' SET '.implode(',', $valuesUpdateOperators).$where, 'manager');
			$requete=$this->getBdd()->prepare('UPDATE '.$this::TABLE.' SET '.implode(',', $valuesUpdateOperators).$where);
			$values[]=$index;
			$requete->execute(array_values($values));
!!!314626.php!!!	delete(in index : mixed) : void

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['delete'].' '.'DELETE FROM '.$this::TABLE.' WHERE '.$this::INDEX.'='.$index, 'manager');
			$requete=$this->getBdd()->prepare('DELETE FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
!!!314754.php!!!	deleteBy(in values : array, in operations : array) : void

			if (!empty($values) && $values!==null)
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $attributesWithOperators), 'manager');
			}
			else
			{
				$where='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['deleteby'].' '.'DELETE FROM '.$this::TABLE.$where, 'manager');
			$requete=$this->getBdd()->prepare('DELETE FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
!!!314882.php!!!	getIdBy(in values : array, in operations : array = '=') : string

			if (!empty($values) && $values!==null)
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $attributesWithOperators), 'manager');
			}
			else
			{
				$where='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['getidby'].' '.'SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where, 'manager');
			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			return $requete->fetch(\PDO::FETCH_ASSOC)[$this::INDEX];
!!!315010.php!!!	getIdByPos(in position : int, in attribute : string) : mixed

			if (is_int($position) && in_array($attribute, $this::ATTRIBUTES))
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['getidbypos'].' '.'SELECT '.$this::INDEX.' FROM '.$this::TABLE.' ORDER BY '.$attribute.' DESC LIMIT 1 OFFSET '.$position, 'manager');
				$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.' ORDER BY '.$attribute.' DESC LIMIT 1 OFFSET '.$position);
				$requete->execute();
				return $requete->fetch(\PDO::FETCH_ASSOC)[$this::INDEX];
			}
			else
			{
				new \exception\Error($GLOBALS['lang']['class']['core']['manager']['error_getidbypos'], 'manager');
			}
			return False;
!!!315138.php!!!	getBy(in values : array = null, in operations : mixed = null, in bounds : array = null) : array

			if (!empty($values) && $values!==null)
			{	
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators).' ';
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $attributesWithOperators), 'manager');
			}
			else
			{
				$where=' ';
			}
			if ($bounds!==null)
			{
				$limit=$this->boundaryInterpreter($bounds);
			}
			else
			{
				$limit='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['getby'].' '.'SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.$where.$limit, 'manager');
			$requete=$this->getBdd()->prepare('SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.$where.$limit);
			if (!empty($values) && $values!==null)
			{
				$requete->execute(array_values($values));
			}
			else
			{
				new \exception\Warning($GLOBALS['lang']['class']['core']['manager']['getby_void'], 'manager');
				$requete->execute(array());
			}
			return $requete->fetchAll();
!!!315266.php!!!	existId(in index : mixed) : bool

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['existId'].' '.'SELECT '.$this::INDEX.' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'='.$index, 'manager');
			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
			return (bool)$requete->fetch(\PDO::FETCH_ASSOC);
!!!315394.php!!!	existBy(in values : array = null, in operations : mixed = null) : bool

			if (!empty($values) && $values!==null)
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $attributesWithOperators), 'manager');
			}
			else
			{
				$where='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['existBy'].' '.'SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where, 'manager');
			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			return (bool)$requete->fetch(\PDO::FETCH_ASSOC);
!!!315522.php!!!	retrieveBy(in values : array = null, in operations : mixed = null, in bounds : array = null) : array

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['retrievBy'], 'manager');
			$results=$this->getBy($values, $operations, $bounds);
			$Objects=array();
			foreach ($results as $result)
			{
				$Objects[]=$this->Managed($result);
			}
			return $Objects;
!!!315650.php!!!	countBy(in values : array = null, in operations : mixed = null) : int

			if (!empty($values) && $values!==null)
			{
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['creating_where'], 'manager');
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
				new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['where_clause'].' '.'WHERE '.implode(' AND ', $attributesWithOperators), 'manager');
			}
			else
			{
				$where='';
			}
			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['countBy'].' '.'SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE.$where, 'manager');
			$requete=$this->getBdd()->prepare('SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			$donnees=$requete->fetch(\PDO::FETCH_ASSOC);
			return (int)$donnees['nbr'];
!!!315778.php!!!	count() : int

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['count'].' '.'SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE, 'manager');
			$requete=$this->getBdd()->prepare('SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE);
			$requete->execute();
			$donnees=$requete->fetch(\PDO::FETCH_ASSOC);
			return (int)$donnees['nbr'];
!!!315906.php!!!	Managed(in table : array) : \core\Managed

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['managed'].' '.get_class($this), 'manager');
			$object=substr(get_class($this),0,-7);
			return new $object($table);
!!!316034.php!!!	__construct(in bdd : \PDO = null) : void

			new \exception\Notice($GLOBALS['lang']['class']['core']['manager']['construct'].' '.get_class($this), 'manager');
			if ($bdd===null)
			{
				$bdd=\core\DBFactory::MysqlConnection();
			}
			$this->setBdd($bdd);
