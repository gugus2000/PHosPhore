class Manager
!!!238850.php!!!	getBdd() : \PDO

				return $this->bdd;
!!!238978.php!!!	setBdd(in bdd : \PDO) : void

				$this->bdd=$bdd;
!!!239106.php!!!	testAttributes(in array : array) : array

			return array_intersect_key($array, array_flip($this::ATTRIBUTES));
!!!239234.php!!!	conditionCreator(in values : array, in operations : mixed) : array

			$values=$this->testAttributes($values);
			$attributesWithOperators=array();
			if (!empty($values) && $values!==null)
			{
				if (is_array($operations))	// Array containing the name and operation to be performed on each attribute
				{
					foreach ($values as $attribute => $value)
					{
						if (isset($operations[$attribute]))
						{
							switch (trim($operations[$attribute]))	// Operators whitelist
							{
								case 'IN':
									if (!isset($attributes))
									{
										$attributes=array_keys($values);
									}
									$attributesWithOperators[]=$attribute.' IN ('.str_repeat('?, ', count($value)-1).'?)';
									$array_search_result=array_search($attribute, $attributes);
									if (count($values)>1)
									{
										if ($array_search_result<=0)
										{
											$values=array_merge($value,array_slice($values, 1));
										}
										else if ($array_search_result>=count($values)-1)
										{
											$values=array_merge(array_slice($values, 0, count($values)-1), $value);
										}
										else
										{
											$values=array_merge(array_slice($values, 0, $array_search_result, true),$value,array_slice($values, $array_search_result+1, null, true));
										}
									}
									else
									{
										$values=$value;
									}
									break;
								case '=':
								case '!=':
								case '<>':
								case '>':
								case '<':
								case '>=':
								case '<=':
									$attributesWithOperators[]=$attribute.$operations[$attribute].'?';
									break;
								default:
									throw new \Exception($GLOBALS['lang']['class_core_manager_unknown_operator']);
									break;
							}
						}
						else
						{
							$attributesWithOperators[]=$attribute.'=?';
						}
					}
				}
				else if (is_string($operations))	// operation to be performed on each attribute
				{
					switch (strtolower(trim($operations)))
					{
						case 'IN':
							foreach ($values as $attribute => $value)
							{
								if (!isset($attributes))
								{
									$attributes=array_keys($values);
								}
								$attributesWithOperators[]=$attribute.' IN ('.str_repeat('?, ', count($value)-1).'?)';
								$array_search_result=array_search($attribute, $attributes);
								if (count($values)>1)
								{
									if ($array_search_result<=0)
									{
										$values=array_merge($value,array_slice($values, 1));
									}
									else if ($array_search_result>=count($values)-1)
									{
										$values=array_merge(array_slice($values, 0, count($values)-1), $value);
									}
									else
									{
										$values=array_merge(array_slice($values, 0, $array_search_result, true),$value,array_slice($values, $array_search_result+1, null, true));
									}
								}
								else
								{
									$values=$value;
								}
							}
							break;
						case '=':
						case '!=':
						case '<>':
						case '>':
						case '<':
						case '>=':
						case '<=':
							foreach ($values as $attribute => $value)
							{
								$attributesWithOperators[]=$attribute.$operations.'?';
							}
							break;
						default:
							throw new \Exception($GLOBALS['lang']['class_core_manager_unknown_operator']);
							break;
					}
				}
				else
				{
					foreach ($values as $attribute => $value)
					{
						$attributesWithOperators[]=$attribute.'=?';
					}
				}
			}
			return [$attributesWithOperators, $values];
!!!239362.php!!!	boundaryInterpreter(in bounds : array) : string

			$order_by=$this::INDEX;
			$order='ASC';
			$offset=0;
			$limit=1;
			foreach ($bounds as $name => $value)
			{
				switch (strtolower(trim($name)))
				{
					case 'order by':
					case 'order':
					case 'order_by':
						if (!in_array($value, $this::ATTRIBUTES))
						{
							throw new \UnexpectedValueException($GLOBALS['lang']['class_core_manager_unknown_attribute']);
						}
						$order_by=$value;
						break;
					case 'end':
						if (!is_numeric($value))
						{
							throw new \UnexpectedValueException($GLOBALS['lang']['general_error_not_numeric']);
						}
						$offset=$value;
						$order='DESC';
						break;
					case 'direction':
						if ($order==='ASC')	// end have priority
						{
							switch (strtolower(trim($value)))
							{
								case 'ASC':
								case 'DESC':
									$order=$value;
									break;
								default:
									throw new \UnexpectedValueException($GLOBALS['lang']['class_core_manager_unknown_direction']);
							}
						}
						break;
					case 'offset':
					case 'position':
					case 'start':
						if (!is_numeric($value))
						{
							throw new \UnexpectedValueException($GLOBALS['lang']['general_error_not_numeric']);
						}
						$offest=$value;
						break;
					case 'limit':
					case 'number':
						if (!is_numeric($value))
						{
							throw new \UnexpectedValueException($GLOBALS['lang']['general_error_not_numeric']);
						}
						$limit=$value;
				}
			}
			return 'ORDER BY '.$order_by.' '.$order.' LIMIT '.(string)$limit.' OFFSET '.(string)$offset;
!!!239490.php!!!	get(in index : mixed) : array

			$requete=$this->getBdd()->prepare('SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
			return $requete->fetch(\PDO::FETCH_ASSOC);
!!!239618.php!!!	add(in values : array) : void

			$values=$this->testAttributes($values);
			$requete=$this->getBdd()->prepare('INSERT INTO '.$this::TABLE.'('.implode(',', array_keys($values)).') VALUES ('.implode(',', array_fill(0, count($values), '?')).')');
			$requete->execute(array_values($values));
!!!239746.php!!!	update(in values : array, in index : mixed) : void

			$attributesWithOperators=array();
			$values=$this->testAttributes($values);
			foreach ($values as $attribute => $value)
			{
				$attributesWithOperators[]=$attribute.'=?';
			}
			$requete=$this->getBdd()->prepare('UPDATE '.$this::TABLE.' SET '.implode(',', $attributesWithOperators).' WHERE '.$this::INDEX.'=?');
			$values[]=$index;
			$requete->execute(array_values($values));
!!!239874.php!!!	delete(in index : mixed) : void

			$requete=$this->getBdd()->prepare('DELETE FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
!!!240002.php!!!	deleteBy(in values : array, in operations : array) : void

			if (!empty($values) && $values!==null)
			{	
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
			}
			else
			{
				$where='';
			}
			$requete=$this->getBdd()->prepare('DELETE FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
!!!240130.php!!!	getIdBy(in values : array, in operations : array = '=') : string

			if (!empty($values) && $values!==null)
			{	
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
			}
			else
			{
				$where='';
			}
			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			return $requete->fetch(\PDO::FETCH_ASSOC)[$this::INDEX];
!!!240258.php!!!	getIdByPos(in position : int, in attribute : string) : mixed

			if (is_int($position) && in_array($attribute, $this::ATTRIBUTES))
			{
				$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.' ORDER BY '.$attribute.' DESC LIMIT 1 OFFSET '.$position);
				$requete->execute();
				return $requete->fetch(\PDO::FETCH_ASSOC)[$this::INDEX];
			}
			return False;
!!!240386.php!!!	getBy(in values : array = null, in operations : mixed = null, in bounds : array = null) : array

			if (!empty($values) && $values!=null)
			{	
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators).' ';
			}
			else
			{
				$where='';
			}
			if ($bounds!==null)
			{
				$limit=$this->boundaryInterpreter($bounds);
			}
			else
			{
				$limit='';
			}
			$requete=$this->getBdd()->prepare('SELECT '.implode(',', $this::ATTRIBUTES).' FROM '.$this::TABLE.$where.$limit);
			$requete->execute(array_values($values));
			return $requete->fetchAll();
!!!240514.php!!!	existId(in index : mixed) : bool

			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.' WHERE '.$this::INDEX.'=?');
			$requete->execute(array($index));
			return (bool)$requete->fetch(\PDO::FETCH_ASSOC);
!!!240642.php!!!	existBy(in values : array = null, in operations : mixed = null) : bool

			if (!empty($values) && $values!==null)
			{
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
			}
			else
			{
				$where='';
			}
			$requete=$this->getBdd()->prepare('SELECT '.$this::INDEX.' FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			return (bool)$requete->fetch(\PDO::FETCH_ASSOC);
!!!240770.php!!!	retrieveBy(in values : array = null, in operations : mixed = null, in bounds : array = null) : array

			$results=$this->getBy($values, $operations, $bounds);
			$Objects=array();
			foreach ($results as $result)
			{
				$Objects[]=$this->Managed($result);
			}
			return $Objects;
!!!240898.php!!!	countBy(in values : array = null, in operations : mixed = null) : int

			if (!empty($values) && $values!==null)
			{
				$conditionCreator=$this->conditionCreator($values, $operations);
				$attributesWithOperators=$conditionCreator[0];
				$values=$conditionCreator[1];
				$where=' WHERE '.implode(' AND ', $attributesWithOperators);
			}
			else
			{
				$where='';
			}
			$requete=$this->getBdd()->prepare('SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE.$where);
			$requete->execute(array_values($values));
			$donnees=$requete->fetch(\PDO::FETCH_ASSOC);
			return (int)$donnees['nbr'];
!!!241026.php!!!	count() : int

			$requete=$this->getBdd()->prepare('SELECT count('.$this::INDEX.') AS nbr FROM '.$this::TABLE);
			$requete->execute();
			$donnees=$requete->fetch(\PDO::FETCH_ASSOC);
			return (int)$donnees['nbr'];
!!!241154.php!!!	Managed(in table : array) : \core\Managed

			$object=substr(get_class($this),0,-7);
			return new $object($table);
!!!241282.php!!!	__construct(in bdd : \PDO = null) : void

			if ($bdd===null)
			{
				$bdd=\core\DBFactory::MysqlConnection();
			}
			$this->setBdd($bdd);
